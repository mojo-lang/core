// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package core

import (
	"strconv"
)

var ValueKindNames = map[int32]string{
	1:  "null",
	2:  "boolean",
	3:  "integer",
	4:  "number",
	5:  "string",
	6:  "bytes",
	10: "array",
	11: "object",
}

var ValueKindValues = map[string]ValueKind{
	"null":    ValueKind_VALUE_KIND_NULL,
	"boolean": ValueKind_VALUE_KIND_BOOLEAN,
	"integer": ValueKind_VALUE_KIND_INTEGER,
	"number":  ValueKind_VALUE_KIND_NUMBER,
	"string":  ValueKind_VALUE_KIND_STRING,
	"bytes":   ValueKind_VALUE_KIND_BYTES,
	"array":   ValueKind_VALUE_KIND_ARRAY,
	"object":  ValueKind_VALUE_KIND_OBJECT,
}

func (x ValueKind) Format() string {
	s, ok := ValueKindNames[int32(x)]
	if ok {
		return s
	}
	if int(x) == 0 {
		return "unspecified"
	}
	return strconv.Itoa(int(x))
}

func (x ValueKind) ToString() string {
	return x.Format()
}

func (x *ValueKind) Parse(value string) error {
	if x != nil {
		s, ok := ValueKindValues[value]
		if ok {
			*x = s
		} else {
			*x = ValueKind_VALUE_KIND_NULL
		}
	} else {
		*x = ValueKind_VALUE_KIND_NULL
	}
	return nil
}

func ParseValueKind(value string) (ValueKind, error) {
	var v ValueKind
	if err := (&v).Parse(value); err != nil {
		return v, err
	}
	return v, nil
}
