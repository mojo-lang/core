// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package core

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
)

func init() {
	RegisterJSONTypeDecoder("core.Color", &ColorStringCodec{})
	RegisterJSONTypeEncoder("core.Color", &ColorStringCodec{})
}

// BareColor will be jsonify to raw, without any codec
type BareColor Color

type ColorStringCodec struct {
	IsFieldPointer bool
}

func (codec *ColorStringCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	s := iter.ReadString()
	color := codec.color(ptr)
	if color == nil {
		color = &Color{}
		*(**Color)(ptr) = color
	}

	if err := color.Parse(s); err != nil {
		iter.ReportError("ColorStringCodec", err.Error())
	}
}

func (codec *ColorStringCodec) IsEmpty(ptr unsafe.Pointer) bool {
	color := codec.color(ptr)
	if color != nil {
		if checker, ok := interface{}(color).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *ColorStringCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	color := codec.color(ptr)
	stream.WriteString(color.Format())
}

func (codec *ColorStringCodec) color(ptr unsafe.Pointer) *Color {
	if codec.IsFieldPointer {
		return *(**Color)(ptr)
	}
	return (*Color)(ptr)
}

type ColorStructCodec struct {
	IsFieldPointer bool
}

func (codec *ColorStructCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	color := codec.bareColor(ptr)
	if a := iter.ReadAny(); a.ValueType() == jsoniter.ObjectValue {
		if color == nil {
			color = &BareColor{}
			*(**BareColor)(ptr) = color
		}
		a.ToVal(color)
	}
}

func (codec *ColorStructCodec) IsEmpty(ptr unsafe.Pointer) bool {
	color := (*Color)(codec.bareColor(ptr))
	if color != nil {
		if checker, ok := interface{}(color).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *ColorStructCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	stream.WriteVal(codec.bareColor(ptr))
}

func (codec *ColorStructCodec) bareColor(ptr unsafe.Pointer) *BareColor {
	if codec.IsFieldPointer {
		return *(**BareColor)(ptr)
	}
	return (*BareColor)(ptr)
}
