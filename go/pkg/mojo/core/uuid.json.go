// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package core

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
)

func init() {
	RegisterJSONTypeDecoder("core.Uuid", &UuidStringCodec{})
	RegisterJSONTypeEncoder("core.Uuid", &UuidStringCodec{})
}

// BareUuid will be jsonify to raw, without any codec
type BareUuid Uuid

type UuidStringCodec struct {
	IsFieldPointer bool
}

func (codec *UuidStringCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	s := iter.ReadString()
	uuid := codec.uuid(ptr)
	if uuid == nil {
		uuid = &Uuid{}
		*(**Uuid)(ptr) = uuid
	}

	if err := uuid.Parse(s); err != nil {
		iter.ReportError("UuidStringCodec", err.Error())
	}
}

func (codec *UuidStringCodec) IsEmpty(ptr unsafe.Pointer) bool {
	uuid := codec.uuid(ptr)
	if uuid != nil {
		if checker, ok := interface{}(uuid).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *UuidStringCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	uuid := codec.uuid(ptr)
	stream.WriteString(uuid.Format())
}

func (codec *UuidStringCodec) uuid(ptr unsafe.Pointer) *Uuid {
	if codec.IsFieldPointer {
		return *(**Uuid)(ptr)
	}
	return (*Uuid)(ptr)
}

type UuidStructCodec struct {
	IsFieldPointer bool
}

func (codec *UuidStructCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	uuid := codec.bareUuid(ptr)
	if a := iter.ReadAny(); a.ValueType() == jsoniter.ObjectValue {
		if uuid == nil {
			uuid = &BareUuid{}
			*(**BareUuid)(ptr) = uuid
		}
		a.ToVal(uuid)
	}
}

func (codec *UuidStructCodec) IsEmpty(ptr unsafe.Pointer) bool {
	uuid := (*Uuid)(codec.bareUuid(ptr))
	if uuid != nil {
		if checker, ok := interface{}(uuid).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *UuidStructCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	stream.WriteVal(codec.bareUuid(ptr))
}

func (codec *UuidStructCodec) bareUuid(ptr unsafe.Pointer) *BareUuid {
	if codec.IsFieldPointer {
		return *(**BareUuid)(ptr)
	}
	return (*BareUuid)(ptr)
}
