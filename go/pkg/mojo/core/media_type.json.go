// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package core

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
)

func init() {
	RegisterJSONTypeDecoder("core.MediaType", &MediaTypeStringCodec{})
	RegisterJSONTypeEncoder("core.MediaType", &MediaTypeStringCodec{})
}

// BareMediaType will be jsonify to raw, without any codec
type BareMediaType MediaType

type MediaTypeStringCodec struct {
	IsFieldPointer bool
}

func (codec *MediaTypeStringCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	s := iter.ReadString()
	mediaType := codec.mediaType(ptr)
	if mediaType == nil {
		mediaType = &MediaType{}
		*(**MediaType)(ptr) = mediaType
	}

	if err := mediaType.Parse(s); err != nil {
		iter.ReportError("MediaTypeStringCodec", err.Error())
	}
}

func (codec *MediaTypeStringCodec) IsEmpty(ptr unsafe.Pointer) bool {
	mediaType := codec.mediaType(ptr)
	if mediaType != nil {
		if checker, ok := interface{}(mediaType).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *MediaTypeStringCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	mediaType := codec.mediaType(ptr)
	stream.WriteString(mediaType.Format())
}

func (codec *MediaTypeStringCodec) mediaType(ptr unsafe.Pointer) *MediaType {
	if codec.IsFieldPointer {
		return *(**MediaType)(ptr)
	}
	return (*MediaType)(ptr)
}

type MediaTypeStructCodec struct {
	IsFieldPointer bool
}

func (codec *MediaTypeStructCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	mediaType := codec.bareMediaType(ptr)
	if a := iter.ReadAny(); a.ValueType() == jsoniter.ObjectValue {
		if mediaType == nil {
			mediaType = &BareMediaType{}
			*(**BareMediaType)(ptr) = mediaType
		}
		a.ToVal(mediaType)
	}
}

func (codec *MediaTypeStructCodec) IsEmpty(ptr unsafe.Pointer) bool {
	mediaType := (*MediaType)(codec.bareMediaType(ptr))
	if mediaType != nil {
		if checker, ok := interface{}(mediaType).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *MediaTypeStructCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	stream.WriteVal(codec.bareMediaType(ptr))
}

func (codec *MediaTypeStructCodec) bareMediaType(ptr unsafe.Pointer) *BareMediaType {
	if codec.IsFieldPointer {
		return *(**BareMediaType)(ptr)
	}
	return (*BareMediaType)(ptr)
}
