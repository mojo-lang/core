// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package core

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
)

func init() {
	RegisterJSONTypeDecoder("core.Domain", &DomainStringCodec{})
	RegisterJSONTypeEncoder("core.Domain", &DomainStringCodec{})
}

// BareDomain will be jsonify to raw, without any codec
type BareDomain Domain

type DomainStringCodec struct {
	IsFieldPointer bool
}

func (codec *DomainStringCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	s := iter.ReadString()
	domain := codec.domain(ptr)
	if domain == nil {
		domain = &Domain{}
		*(**Domain)(ptr) = domain
	}

	if err := domain.Parse(s); err != nil {
		iter.ReportError("DomainStringCodec", err.Error())
	}
}

func (codec *DomainStringCodec) IsEmpty(ptr unsafe.Pointer) bool {
	domain := codec.domain(ptr)
	if domain != nil {
		if checker, ok := interface{}(domain).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *DomainStringCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	domain := codec.domain(ptr)
	stream.WriteString(domain.Format())
}

func (codec *DomainStringCodec) domain(ptr unsafe.Pointer) *Domain {
	if codec.IsFieldPointer {
		return *(**Domain)(ptr)
	}
	return (*Domain)(ptr)
}

type DomainStructCodec struct {
	IsFieldPointer bool
}

func (codec *DomainStructCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	domain := codec.bareDomain(ptr)
	if a := iter.ReadAny(); a.ValueType() == jsoniter.ObjectValue {
		if domain == nil {
			domain = &BareDomain{}
			*(**BareDomain)(ptr) = domain
		}
		a.ToVal(domain)
	}
}

func (codec *DomainStructCodec) IsEmpty(ptr unsafe.Pointer) bool {
	domain := (*Domain)(codec.bareDomain(ptr))
	if domain != nil {
		if checker, ok := interface{}(domain).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *DomainStructCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	stream.WriteVal(codec.bareDomain(ptr))
}

func (codec *DomainStructCodec) bareDomain(ptr unsafe.Pointer) *BareDomain {
	if codec.IsFieldPointer {
		return *(**BareDomain)(ptr)
	}
	return (*BareDomain)(ptr)
}
