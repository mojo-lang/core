// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package core

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
)

func init() {
	RegisterJSONTypeDecoder("core.Float32Values", &Float32ValuesCodec{})
	RegisterJSONTypeEncoder("core.Float32Values", &Float32ValuesCodec{})
}

type Float32ValuesCodec struct {
}

func (codec *Float32ValuesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	any := iter.ReadAny()
	float32Values := (*Float32Values)(ptr)
	if any.ValueType() == jsoniter.ArrayValue {
		any.ToVal(&float32Values.Vals)
	}
}

func (codec *Float32ValuesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	float32Values := (*Float32Values)(ptr)
	return float32Values == nil || len(float32Values.Vals) == 0
}

func (codec *Float32ValuesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	float32Values := (*Float32Values)(ptr)

	stream.WriteArrayStart()
	for i, v := range float32Values.Vals {
		if i > 0 {
			stream.WriteMore()
		}
		stream.WriteVal(v)
	}
	stream.WriteArrayEnd()
}
