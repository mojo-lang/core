// Code generated by protoc-gen-go.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: mojo/core/checksum.proto

package core

import (
    errors "errors"
    _ "github.com/mojo-lang/core/go/pkg/mojo"
    "google.golang.org/protobuf/encoding/protowire"
    "google.golang.org/protobuf/proto"
    protoreflect "google.golang.org/protobuf/reflect/protoreflect"
    "google.golang.org/protobuf/reflect/protoregistry"
    "google.golang.org/protobuf/runtime/protoiface"
    protoimpl "google.golang.org/protobuf/runtime/protoimpl"
    reflect "reflect"
    sync "sync"
)

const (
    // Verify that this generated code is sufficiently up-to-date.
    _ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
    // Verify that runtime/protoimpl is sufficiently up-to-date.
    _ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Any struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Type     string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
    Val      []byte `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
    typedVal interface{}
}

func (x *Any) Reset() {
    *x = Any{}
    if protoimpl.UnsafeEnabled {
        mi := &file_mojo_core_any_proto_msgTypes[0]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *Any) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*Any) ProtoMessage() {}

func (x *Any) ProtoReflect() protoreflect.Message {
    mi := &file_mojo_core_any_proto_msgTypes[0]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return &anyMessage{ms}
    }
    return &anyMessage{mi.MessageOf(x)}
}

// Deprecated: Use Any.ProtoReflect.Descriptor instead.
func (*Any) Descriptor() ([]byte, []int) {
    return file_mojo_core_any_proto_rawDescGZIP(), []int{0}
}

func (x *Any) GetType() string {
    if x != nil {
        return x.Type
    }
    return ""
}

func (x *Any) GetVal() []byte {
    if x != nil {
        return x.Val
    }
    return nil
}

var File_mojo_core_any_proto protoreflect.FileDescriptor

var file_mojo_core_any_proto_rawDesc = []byte{
    0x0a, 0x13, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
    0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65,
    0x1a, 0x0f, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
    0x6f, 0x22, 0x36, 0x0a, 0x03, 0x41, 0x6e, 0x79, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
    0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0xcf, 0x24, 0x05, 0x40, 0x74, 0x79, 0x70,
    0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02,
    0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x42, 0x55, 0x0a, 0x16, 0x6f, 0x72, 0x67,
    0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x63,
    0x6f, 0x72, 0x65, 0x42, 0x08, 0x41, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
    0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x6a, 0x6f,
    0x2d, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b,
    0x67, 0x2f, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x3b, 0x63, 0x6f, 0x72, 0x65,
    0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
    file_mojo_core_any_proto_rawDescOnce sync.Once
    file_mojo_core_any_proto_rawDescData = file_mojo_core_any_proto_rawDesc
)

func file_mojo_core_any_proto_rawDescGZIP() []byte {
    file_mojo_core_any_proto_rawDescOnce.Do(func() {
        file_mojo_core_any_proto_rawDescData = protoimpl.X.CompressGZIP(file_mojo_core_any_proto_rawDescData)
    })
    return file_mojo_core_any_proto_rawDescData
}

var file_mojo_core_any_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_mojo_core_any_proto_goTypes = []interface{}{
    (*Any)(nil), // 0: mojo.core.Any
}
var file_mojo_core_any_proto_depIdxs = []int32{
    0, // [0:0] is the sub-list for method output_type
    0, // [0:0] is the sub-list for method input_type
    0, // [0:0] is the sub-list for extension type_name
    0, // [0:0] is the sub-list for extension extendee
    0, // [0:0] is the sub-list for field type_name
}

func init() { file_mojo_core_any_proto_init() }
func file_mojo_core_any_proto_init() {
    if File_mojo_core_any_proto != nil {
        return
    }
    if !protoimpl.UnsafeEnabled {
        file_mojo_core_any_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*Any); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
    }
    type x struct{}
    out := protoimpl.TypeBuilder{
        File: protoimpl.DescBuilder{
            GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
            RawDescriptor: file_mojo_core_any_proto_rawDesc,
            NumEnums:      0,
            NumMessages:   1,
            NumExtensions: 0,
            NumServices:   0,
        },
        GoTypes:           file_mojo_core_any_proto_goTypes,
        DependencyIndexes: file_mojo_core_any_proto_depIdxs,
        MessageInfos:      file_mojo_core_any_proto_msgTypes,
    }.Build()
    File_mojo_core_any_proto = out.File
    file_mojo_core_any_proto_rawDesc = nil
    file_mojo_core_any_proto_goTypes = nil
    file_mojo_core_any_proto_depIdxs = nil
}

type anyMessage struct {
    msg protoreflect.Message
}

func (m anyMessage) Descriptor() protoreflect.MessageDescriptor {
    return m.msg.Descriptor()
}
func (m anyMessage) Type() protoreflect.MessageType {
    return m.msg.Type()
}
func (m anyMessage) New() protoreflect.Message {
    return m.msg.New()
}
func (m anyMessage) Interface() protoreflect.ProtoMessage {
    return m.msg.Interface()
}
func (m anyMessage) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
    m.msg.Range(f)
}
func (m anyMessage) Has(fd protoreflect.FieldDescriptor) bool {
    return m.msg.Has(fd)
}
func (m anyMessage) Clear(fd protoreflect.FieldDescriptor) {
    m.msg.Clear(fd)
}
func (m anyMessage) Get(fd protoreflect.FieldDescriptor) protoreflect.Value {
    return m.msg.Get(fd)
}
func (m anyMessage) Set(fd protoreflect.FieldDescriptor, v protoreflect.Value) {
    m.msg.Set(fd, v)
}
func (m anyMessage) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
    return m.msg.Mutable(fd)
}
func (m anyMessage) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
    return m.msg.NewField(fd)
}
func (m anyMessage) WhichOneof(fd protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
    return m.msg.WhichOneof(fd)
}
func (m anyMessage) GetUnknown() protoreflect.RawFields {
    return m.msg.GetUnknown()
}
func (m anyMessage) SetUnknown(fs protoreflect.RawFields) {
    m.msg.SetUnknown(fs)
}
func (m anyMessage) IsValid() bool {
    return m.msg.IsValid()
}
func (m anyMessage) ProtoMethods() *protoiface.Methods {
    return anyProtoMethods
}

var anyProtoMethods = &protoiface.Methods{
    Marshal:   marshalAny,
    Unmarshal: unmarshalAny,
    Merge:     mergeAny,

    // We have no way to tell whether the type's Marshal method
    // supports deterministic serialization or not, but this
    // preserves the v1 implementation's behavior of always
    // calling Marshal methods when present.
    Flags: protoiface.SupportMarshalDeterministic,
}

func marshalAny(in protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
    v := in.Message.Interface()
    if any, ok := v.(*Any); !ok {
        return protoiface.MarshalOutput{}, errors.New("not any type")
    } else {
        out, err := any.marshal()
        if in.Buf != nil {
            out = append(in.Buf, out...)
        }
        return protoiface.MarshalOutput{
            Buf: out,
        }, err
    }
}

// FIXME should implement all the support types codec
func (x *Any) marshal() ([]byte, error) {
    if x != nil && x.typedVal != nil {
        x.Type = GetMojoTypeName(x.typedVal)
        switch val := x.typedVal.(type) {
        case int64:
            x.Val = protowire.AppendVarint([]byte{}, uint64(val))
        case string:
            x.Val = []byte(val)
        case proto.Message:
            b, err := proto.Marshal(val)
            if err != nil {
                return nil, err
            }
            x.Val = b
        }

        var buf []byte
        buf = protowire.AppendTag(buf, protowire.Number(1), protowire.BytesType)
        buf = protowire.AppendBytes(buf, []byte(x.Type))

        if len(x.Val) > 0 {
            buf = protowire.AppendTag(buf, protowire.Number(2), protowire.BytesType)
            buf = protowire.AppendBytes(buf, x.Val)
        }

        return buf, nil
    }
    return nil, errors.New("`Any` is null")
}

func unmarshalAny(in protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
    v := in.Message.Interface()
    any, ok := v.(*Any)
    if !ok {
        return protoiface.UnmarshalOutput{}, errors.New("not any type")
    }
    return protoiface.UnmarshalOutput{}, any.unmarshal(in.Buf)
}

func (x *Any) unmarshal(bytes []byte) error {
    parse := func() error {
        number, typ, count := protowire.ConsumeTag(bytes)
        if count <= 0 {
            return errors.New("")
        }

        if number == 1 && typ == protowire.BytesType {
            v, n := protowire.ConsumeBytes(bytes[count:])
            if n < 0 {
                return errors.New("")
            }
            x.Type = string(v)
            bytes = bytes[count+n:]
            return nil
        } else if number == 2 && typ == protowire.BytesType {
            v, n := protowire.ConsumeBytes(bytes[count:])
            if n < 0 {
                return errors.New("")
            }
            x.Val = v
            bytes = bytes[count+n:]
            return nil
        }
        return errors.New("")
    }

    if err := parse(); err != nil {
        return err
    }
    if err := parse(); err != nil {
        return nil
    }

    switch x.Type {
    case Int8TypeName, Int16TypeName, Int32TypeName, Int64TypeName:
        if v, n := protowire.ConsumeVarint(x.Val); n < 0 {
            return errors.New("")
        } else {
            x.typedVal = int64(v)
        }
    case StringTypeName:
        x.typedVal = string(x.Val)
    default:
        if msgType, err := protoregistry.GlobalTypes.FindMessageByName(protoreflect.FullName(x.Type)); err != nil {
            return err
        } else {
            msg := msgType.New().Interface()
            if err = proto.Unmarshal(x.Val, msg); err != nil {
                return err
            }
            x.typedVal = msg
        }
    }

    return nil
}

func mergeAny(in protoiface.MergeInput) protoiface.MergeOutput {
    src := in.Source.Interface()
    dst := in.Destination.Interface()

    srcAny, srcOk := src.(*Any)
    dstAny, dstOk := dst.(*Any)
    if !srcOk || !dstOk {
        return protoiface.MergeOutput{}
    }

    dstAny.Type = srcAny.Type
    dstAny.Val = srcAny.Val
    dstAny.typedVal = srcAny.typedVal

    return protoiface.MergeOutput{Flags: protoiface.MergeComplete}
}
