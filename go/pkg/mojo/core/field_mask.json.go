// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package core

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
)

func init() {
	RegisterJSONTypeDecoder("core.FieldMask", &FieldMaskStringCodec{})
	RegisterJSONTypeEncoder("core.FieldMask", &FieldMaskStringCodec{})
}

// BareFieldMask will be jsonify to raw, without any codec
type BareFieldMask FieldMask

type FieldMaskStringCodec struct {
	IsFieldPointer bool
}

func (codec *FieldMaskStringCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	s := iter.ReadString()
	fieldMask := codec.fieldMask(ptr)
	if fieldMask == nil {
		fieldMask = &FieldMask{}
		*(**FieldMask)(ptr) = fieldMask
	}

	if err := fieldMask.Parse(s); err != nil {
		iter.ReportError("FieldMaskStringCodec", err.Error())
	}
}

func (codec *FieldMaskStringCodec) IsEmpty(ptr unsafe.Pointer) bool {
	fieldMask := codec.fieldMask(ptr)
	if fieldMask != nil {
		if checker, ok := interface{}(fieldMask).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *FieldMaskStringCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	fieldMask := codec.fieldMask(ptr)
	stream.WriteString(fieldMask.Format())
}

func (codec *FieldMaskStringCodec) fieldMask(ptr unsafe.Pointer) *FieldMask {
	if codec.IsFieldPointer {
		return *(**FieldMask)(ptr)
	}
	return (*FieldMask)(ptr)
}

type FieldMaskStructCodec struct {
	IsFieldPointer bool
}

func (codec *FieldMaskStructCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	fieldMask := codec.bareFieldMask(ptr)
	if a := iter.ReadAny(); a.ValueType() == jsoniter.ObjectValue {
		if fieldMask == nil {
			fieldMask = &BareFieldMask{}
			*(**BareFieldMask)(ptr) = fieldMask
		}
		a.ToVal(fieldMask)
	}
}

func (codec *FieldMaskStructCodec) IsEmpty(ptr unsafe.Pointer) bool {
	fieldMask := (*FieldMask)(codec.bareFieldMask(ptr))
	if fieldMask != nil {
		if checker, ok := interface{}(fieldMask).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *FieldMaskStructCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	stream.WriteVal(codec.bareFieldMask(ptr))
}

func (codec *FieldMaskStructCodec) bareFieldMask(ptr unsafe.Pointer) *BareFieldMask {
	if codec.IsFieldPointer {
		return *(**BareFieldMask)(ptr)
	}
	return (*BareFieldMask)(ptr)
}
