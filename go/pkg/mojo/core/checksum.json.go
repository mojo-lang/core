// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package core

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
)

func init() {
	RegisterJSONTypeDecoder("core.Checksum", &ChecksumStringCodec{})
	RegisterJSONTypeEncoder("core.Checksum", &ChecksumStringCodec{})
}

// BareChecksum will be jsonify to raw, without any codec
type BareChecksum Checksum

type ChecksumStringCodec struct {
	IsFieldPointer bool
}

func (codec *ChecksumStringCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	s := iter.ReadString()
	checksum := codec.checksum(ptr)
	if checksum == nil {
		checksum = &Checksum{}
		*(**Checksum)(ptr) = checksum
	}

	if err := checksum.Parse(s); err != nil {
		iter.ReportError("ChecksumStringCodec", err.Error())
	}
}

func (codec *ChecksumStringCodec) IsEmpty(ptr unsafe.Pointer) bool {
	checksum := codec.checksum(ptr)
	if checksum != nil {
		if checker, ok := interface{}(checksum).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *ChecksumStringCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	checksum := codec.checksum(ptr)
	stream.WriteString(checksum.Format())
}

func (codec *ChecksumStringCodec) checksum(ptr unsafe.Pointer) *Checksum {
	if codec.IsFieldPointer {
		return *(**Checksum)(ptr)
	}
	return (*Checksum)(ptr)
}

type ChecksumStructCodec struct {
	IsFieldPointer bool
}

func (codec *ChecksumStructCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	checksum := codec.bareChecksum(ptr)
	if a := iter.ReadAny(); a.ValueType() == jsoniter.ObjectValue {
		if checksum == nil {
			checksum = &BareChecksum{}
			*(**BareChecksum)(ptr) = checksum
		}
		a.ToVal(checksum)
	}
}

func (codec *ChecksumStructCodec) IsEmpty(ptr unsafe.Pointer) bool {
	checksum := (*Checksum)(codec.bareChecksum(ptr))
	if checksum != nil {
		if checker, ok := interface{}(checksum).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *ChecksumStructCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	stream.WriteVal(codec.bareChecksum(ptr))
}

func (codec *ChecksumStructCodec) bareChecksum(ptr unsafe.Pointer) *BareChecksum {
	if codec.IsFieldPointer {
		return *(**BareChecksum)(ptr)
	}
	return (*BareChecksum)(ptr)
}
