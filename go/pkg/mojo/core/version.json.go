// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package core

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
)

func init() {
	RegisterJSONTypeDecoder("core.Version", &VersionStringCodec{})
	RegisterJSONTypeEncoder("core.Version", &VersionStringCodec{})
}

// BareVersion will be jsonify to raw, without any codec
type BareVersion Version

type VersionStringCodec struct {
	IsFieldPointer bool
}

func (codec *VersionStringCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	s := iter.ReadString()
	version := codec.version(ptr)
	if version == nil {
		version = &Version{}
		*(**Version)(ptr) = version
	}

	if err := version.Parse(s); err != nil {
		iter.ReportError("VersionStringCodec", err.Error())
	}
}

func (codec *VersionStringCodec) IsEmpty(ptr unsafe.Pointer) bool {
	version := codec.version(ptr)
	if version != nil {
		if checker, ok := interface{}(version).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *VersionStringCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	version := codec.version(ptr)
	stream.WriteString(version.Format())
}

func (codec *VersionStringCodec) version(ptr unsafe.Pointer) *Version {
	if codec.IsFieldPointer {
		return *(**Version)(ptr)
	}
	return (*Version)(ptr)
}

type VersionStructCodec struct {
	IsFieldPointer bool
}

func (codec *VersionStructCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	version := codec.bareVersion(ptr)
	if a := iter.ReadAny(); a.ValueType() == jsoniter.ObjectValue {
		if version == nil {
			version = &BareVersion{}
			*(**BareVersion)(ptr) = version
		}
		a.ToVal(version)
	}
}

func (codec *VersionStructCodec) IsEmpty(ptr unsafe.Pointer) bool {
	version := (*Version)(codec.bareVersion(ptr))
	if version != nil {
		if checker, ok := interface{}(version).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *VersionStructCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	stream.WriteVal(codec.bareVersion(ptr))
}

func (codec *VersionStructCodec) bareVersion(ptr unsafe.Pointer) *BareVersion {
	if codec.IsFieldPointer {
		return *(**BareVersion)(ptr)
	}
	return (*BareVersion)(ptr)
}
