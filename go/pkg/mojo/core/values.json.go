// Code generated by wand. DO NOT EDIT.
// Rerunning wand will overwrite this file.

package core

import (
	jsoniter "github.com/json-iterator/go"
	"unsafe"
)

func init() {
	jsoniter.RegisterTypeDecoder("core.Values", &ValuesCodec{})
	jsoniter.RegisterTypeEncoder("core.Values", &ValuesCodec{})
}

type ValuesCodec struct {
}

func (codec *ValuesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	any := iter.ReadAny()
	values := (*Values)(ptr)
	if any.ValueType() == jsoniter.ArrayValue {
		any.ToVal(&values.Values)
	}
}

func (codec *ValuesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	values := (*Values)(ptr)
	return values == nil || len(values.Values) == 0
}

func (codec *ValuesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	values := (*Values)(ptr)

	stream.WriteArrayStart()
	for i, v := range values.Values {
		if i > 0 {
			stream.WriteMore()
		}
		stream.WriteVal(v)
	}
	stream.WriteArrayEnd()
}
