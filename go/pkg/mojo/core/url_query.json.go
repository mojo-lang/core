// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package core

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
)

func init() {
	RegisterJSONTypeDecoder("core.Url_Query", &UrlQueryStringCodec{})
	RegisterJSONTypeEncoder("core.Url_Query", &UrlQueryStringCodec{})
}

// BareUrlQuery will be jsonify to raw, without any codec
type BareUrlQuery Url_Query

type UrlQueryStringCodec struct {
	IsFieldPointer bool
}

func (codec *UrlQueryStringCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	s := iter.ReadString()
	query := codec.query(ptr)
	if query == nil {
		query = &Url_Query{}
		*(**Url_Query)(ptr) = query
	}

	if err := query.Parse(s); err != nil {
		iter.ReportError("UrlQueryStringCodec", err.Error())
	}
}

func (codec *UrlQueryStringCodec) IsEmpty(ptr unsafe.Pointer) bool {
	query := codec.query(ptr)
	if query != nil {
		if checker, ok := interface{}(query).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *UrlQueryStringCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	query := codec.query(ptr)
	stream.WriteString(query.Format())
}

func (codec *UrlQueryStringCodec) query(ptr unsafe.Pointer) *Url_Query {
	if codec.IsFieldPointer {
		return *(**Url_Query)(ptr)
	}
	return (*Url_Query)(ptr)
}

type UrlQueryStructCodec struct {
	IsFieldPointer bool
}

func (codec *UrlQueryStructCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	query := codec.bareUrlQuery(ptr)
	if a := iter.ReadAny(); a.ValueType() == jsoniter.ObjectValue {
		if query == nil {
			query = &BareUrlQuery{}
			*(**BareUrlQuery)(ptr) = query
		}
		a.ToVal(query)
	}
}

func (codec *UrlQueryStructCodec) IsEmpty(ptr unsafe.Pointer) bool {
	query := (*Url_Query)(codec.bareUrlQuery(ptr))
	if query != nil {
		if checker, ok := interface{}(query).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *UrlQueryStructCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	stream.WriteVal(codec.bareUrlQuery(ptr))
}

func (codec *UrlQueryStructCodec) bareUrlQuery(ptr unsafe.Pointer) *BareUrlQuery {
	if codec.IsFieldPointer {
		return *(**BareUrlQuery)(ptr)
	}
	return (*BareUrlQuery)(ptr)
}
