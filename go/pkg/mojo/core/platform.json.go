// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package core

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
)

func init() {
	RegisterJSONTypeDecoder("core.Platform", &PlatformStringCodec{})
	RegisterJSONTypeEncoder("core.Platform", &PlatformStringCodec{})
}

// BarePlatform will be jsonify to raw, without any codec
type BarePlatform Platform

type PlatformStringCodec struct {
	IsFieldPointer bool
}

func (codec *PlatformStringCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	s := iter.ReadString()
	platform := codec.platform(ptr)
	if platform == nil {
		platform = &Platform{}
		*(**Platform)(ptr) = platform
	}

	if err := platform.Parse(s); err != nil {
		iter.ReportError("PlatformStringCodec", err.Error())
	}
}

func (codec *PlatformStringCodec) IsEmpty(ptr unsafe.Pointer) bool {
	platform := codec.platform(ptr)
	if platform != nil {
		if checker, ok := interface{}(platform).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *PlatformStringCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	platform := codec.platform(ptr)
	stream.WriteString(platform.Format())
}

func (codec *PlatformStringCodec) platform(ptr unsafe.Pointer) *Platform {
	if codec.IsFieldPointer {
		return *(**Platform)(ptr)
	}
	return (*Platform)(ptr)
}

type PlatformStructCodec struct {
	IsFieldPointer bool
}

func (codec *PlatformStructCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	platform := codec.barePlatform(ptr)
	if a := iter.ReadAny(); a.ValueType() == jsoniter.ObjectValue {
		if platform == nil {
			platform = &BarePlatform{}
			*(**BarePlatform)(ptr) = platform
		}
		a.ToVal(platform)
	}
}

func (codec *PlatformStructCodec) IsEmpty(ptr unsafe.Pointer) bool {
	platform := (*Platform)(codec.barePlatform(ptr))
	if platform != nil {
		if checker, ok := interface{}(platform).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *PlatformStructCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	stream.WriteVal(codec.barePlatform(ptr))
}

func (codec *PlatformStructCodec) barePlatform(ptr unsafe.Pointer) *BarePlatform {
	if codec.IsFieldPointer {
		return *(**BarePlatform)(ptr)
	}
	return (*BarePlatform)(ptr)
}
