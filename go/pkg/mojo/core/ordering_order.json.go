// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package core

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
)

func init() {
	RegisterJSONTypeDecoder("core.Ordering_Order", &OrderingOrderStringCodec{})
	RegisterJSONTypeEncoder("core.Ordering_Order", &OrderingOrderStringCodec{})
}

// BareOrderingOrder will be jsonify to raw, without any codec
type BareOrderingOrder Ordering_Order

type OrderingOrderStringCodec struct {
	IsFieldPointer bool
}

func (codec *OrderingOrderStringCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	s := iter.ReadString()
	order := codec.order(ptr)
	if order == nil {
		order = &Ordering_Order{}
		*(**Ordering_Order)(ptr) = order
	}

	if err := order.Parse(s); err != nil {
		iter.ReportError("OrderingOrderStringCodec", err.Error())
	}
}

func (codec *OrderingOrderStringCodec) IsEmpty(ptr unsafe.Pointer) bool {
	order := codec.order(ptr)
	if order != nil {
		if checker, ok := interface{}(order).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *OrderingOrderStringCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	order := codec.order(ptr)
	stream.WriteString(order.Format())
}

func (codec *OrderingOrderStringCodec) order(ptr unsafe.Pointer) *Ordering_Order {
	if codec.IsFieldPointer {
		return *(**Ordering_Order)(ptr)
	}
	return (*Ordering_Order)(ptr)
}

type OrderingOrderStructCodec struct {
	IsFieldPointer bool
}

func (codec *OrderingOrderStructCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	order := codec.bareOrderingOrder(ptr)
	if a := iter.ReadAny(); a.ValueType() == jsoniter.ObjectValue {
		if order == nil {
			order = &BareOrderingOrder{}
			*(**BareOrderingOrder)(ptr) = order
		}
		a.ToVal(order)
	}
}

func (codec *OrderingOrderStructCodec) IsEmpty(ptr unsafe.Pointer) bool {
	order := (*Ordering_Order)(codec.bareOrderingOrder(ptr))
	if order != nil {
		if checker, ok := interface{}(order).(EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *OrderingOrderStructCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	stream.WriteVal(codec.bareOrderingOrder(ptr))
}

func (codec *OrderingOrderStructCodec) bareOrderingOrder(ptr unsafe.Pointer) *BareOrderingOrder {
	if codec.IsFieldPointer {
		return *(**BareOrderingOrder)(ptr)
	}
	return (*BareOrderingOrder)(ptr)
}
