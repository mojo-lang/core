// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mojo/core/phone_number.proto

package core

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PhoneNumber_CountryCodeSource int32

const (
	PhoneNumber_COUNTRY_CODE_SOURCE_UNSPECIFIED                   PhoneNumber_CountryCodeSource = 0
	PhoneNumber_COUNTRY_CODE_SOURCE_FROM_NUMBER_WITH_PLUS_SIGN    PhoneNumber_CountryCodeSource = 1
	PhoneNumber_COUNTRY_CODE_SOURCE_FROM_NUMBER_WITH_IDD          PhoneNumber_CountryCodeSource = 2
	PhoneNumber_COUNTRY_CODE_SOURCE_FROM_NUMBER_WITHOUT_PLUS_SIGN PhoneNumber_CountryCodeSource = 3
	PhoneNumber_COUNTRY_CODE_SOURCE_FROM_DEFAULT_COUNTRY          PhoneNumber_CountryCodeSource = 4
)

var PhoneNumber_CountryCodeSource_name = map[int32]string{
	0: "COUNTRY_CODE_SOURCE_UNSPECIFIED",
	1: "COUNTRY_CODE_SOURCE_FROM_NUMBER_WITH_PLUS_SIGN",
	2: "COUNTRY_CODE_SOURCE_FROM_NUMBER_WITH_IDD",
	3: "COUNTRY_CODE_SOURCE_FROM_NUMBER_WITHOUT_PLUS_SIGN",
	4: "COUNTRY_CODE_SOURCE_FROM_DEFAULT_COUNTRY",
}

var PhoneNumber_CountryCodeSource_value = map[string]int32{
	"COUNTRY_CODE_SOURCE_UNSPECIFIED":                   0,
	"COUNTRY_CODE_SOURCE_FROM_NUMBER_WITH_PLUS_SIGN":    1,
	"COUNTRY_CODE_SOURCE_FROM_NUMBER_WITH_IDD":          2,
	"COUNTRY_CODE_SOURCE_FROM_NUMBER_WITHOUT_PLUS_SIGN": 3,
	"COUNTRY_CODE_SOURCE_FROM_DEFAULT_COUNTRY":          4,
}

func (x PhoneNumber_CountryCodeSource) String() string {
	return proto.EnumName(PhoneNumber_CountryCodeSource_name, int32(x))
}

func (PhoneNumber_CountryCodeSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a308072b5286cdf, []int{0, 0}
}

type PhoneNumber struct {
	CountryCode                  int32                         `protobuf:"varint,1,opt,name=country_code,json=countryCode,proto3" json:"countryCode,omitempty"`
	NationalNumber               uint64                        `protobuf:"varint,2,opt,name=national_number,json=nationalNumber,proto3" json:"nationalNumber,omitempty"`
	Extension                    string                        `protobuf:"bytes,3,opt,name=extension,proto3" json:"extension,omitempty"`
	ItalianLeadingZero           bool                          `protobuf:"varint,4,opt,name=italian_leading_zero,json=italianLeadingZero,proto3" json:"italianLeadingZero,omitempty"`
	NumberOfLeadingZeros         int32                         `protobuf:"varint,8,opt,name=number_of_leading_zeros,json=numberOfLeadingZeros,proto3" json:"numberOfLeadingZeros,omitempty"`
	RawInput                     string                        `protobuf:"bytes,5,opt,name=raw_input,json=rawInput,proto3" json:"rawInput,omitempty"`
	CountryCodeSource            PhoneNumber_CountryCodeSource `protobuf:"varint,6,opt,name=country_code_source,json=countryCodeSource,proto3,enum=mojo.core.PhoneNumber_CountryCodeSource" json:"countryCodeSource,omitempty"`
	PreferredDomesticCarrierCode string                        `protobuf:"bytes,7,opt,name=preferred_domestic_carrier_code,json=preferredDomesticCarrierCode,proto3" json:"preferredDomesticCarrierCode,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}                      `json:"-"`
	XXX_unrecognized             []byte                        `json:"-"`
	XXX_sizecache                int32                         `json:"-"`
}

func (m *PhoneNumber) Reset()         { *m = PhoneNumber{} }
func (m *PhoneNumber) String() string { return proto.CompactTextString(m) }
func (*PhoneNumber) ProtoMessage()    {}
func (*PhoneNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a308072b5286cdf, []int{0}
}
func (m *PhoneNumber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhoneNumber.Unmarshal(m, b)
}
func (m *PhoneNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhoneNumber.Marshal(b, m, deterministic)
}
func (m *PhoneNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneNumber.Merge(m, src)
}
func (m *PhoneNumber) XXX_Size() int {
	return xxx_messageInfo_PhoneNumber.Size(m)
}
func (m *PhoneNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneNumber.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneNumber proto.InternalMessageInfo

func (m *PhoneNumber) GetCountryCode() int32 {
	if m != nil {
		return m.CountryCode
	}
	return 0
}

func (m *PhoneNumber) GetNationalNumber() uint64 {
	if m != nil {
		return m.NationalNumber
	}
	return 0
}

func (m *PhoneNumber) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *PhoneNumber) GetItalianLeadingZero() bool {
	if m != nil {
		return m.ItalianLeadingZero
	}
	return false
}

func (m *PhoneNumber) GetNumberOfLeadingZeros() int32 {
	if m != nil {
		return m.NumberOfLeadingZeros
	}
	return 0
}

func (m *PhoneNumber) GetRawInput() string {
	if m != nil {
		return m.RawInput
	}
	return ""
}

func (m *PhoneNumber) GetCountryCodeSource() PhoneNumber_CountryCodeSource {
	if m != nil {
		return m.CountryCodeSource
	}
	return PhoneNumber_COUNTRY_CODE_SOURCE_UNSPECIFIED
}

func (m *PhoneNumber) GetPreferredDomesticCarrierCode() string {
	if m != nil {
		return m.PreferredDomesticCarrierCode
	}
	return ""
}

func init() {
	proto.RegisterEnum("mojo.core.PhoneNumber_CountryCodeSource", PhoneNumber_CountryCodeSource_name, PhoneNumber_CountryCodeSource_value)
	proto.RegisterType((*PhoneNumber)(nil), "mojo.core.PhoneNumber")
}

func init() { proto.RegisterFile("mojo/core/phone_number.proto", fileDescriptor_3a308072b5286cdf) }

var fileDescriptor_3a308072b5286cdf = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdb, 0x6e, 0x9b, 0x4c,
	0x14, 0x85, 0x7f, 0x72, 0xf6, 0xe4, 0x57, 0xea, 0x4c, 0xd2, 0x84, 0xaa, 0x56, 0x41, 0xae, 0x54,
	0xa1, 0x2a, 0x05, 0x35, 0x51, 0xae, 0xda, 0x9b, 0x72, 0x70, 0x8b, 0xe4, 0x18, 0x0b, 0x1b, 0x55,
	0x89, 0x54, 0x8d, 0x30, 0x1e, 0x13, 0x5a, 0x33, 0x43, 0xc7, 0x58, 0xa9, 0xfb, 0x2e, 0x7d, 0x35,
	0x1e, 0x80, 0x97, 0x68, 0x05, 0x38, 0xf6, 0x24, 0x8e, 0xa2, 0xdc, 0x70, 0xb1, 0xd6, 0xb7, 0xf7,
	0x66, 0x58, 0xc3, 0x06, 0x8d, 0x98, 0x7e, 0xa7, 0x5a, 0x40, 0x19, 0xd6, 0x92, 0x6b, 0x4a, 0x30,
	0x22, 0xd3, 0x78, 0x80, 0x99, 0x9a, 0x30, 0x9a, 0x52, 0x58, 0x2b, 0x5c, 0xb5, 0x70, 0x9b, 0x7f,
	0xb6, 0xc1, 0x6e, 0xb7, 0x20, 0x3a, 0x25, 0x00, 0x3f, 0x82, 0xff, 0x03, 0x3a, 0x25, 0x29, 0x9b,
	0xa1, 0x80, 0x0e, 0xb1, 0x28, 0xc8, 0x82, 0xb2, 0xa9, 0xbf, 0xc8, 0x33, 0xe9, 0xf9, 0x5c, 0x37,
	0xe8, 0x10, 0x9f, 0xd0, 0x38, 0x4a, 0x71, 0x9c, 0xa4, 0x33, 0x77, 0x97, 0x93, 0xa1, 0x05, 0x9e,
	0x11, 0x3f, 0x8d, 0x28, 0xf1, 0xc7, 0xf3, 0x89, 0xe2, 0x9a, 0x2c, 0x28, 0x1b, 0x7a, 0x23, 0xcf,
	0x24, 0xf1, 0xd6, 0xaa, 0x46, 0x71, 0x3d, 0xf6, 0xee, 0x3a, 0xf0, 0x1c, 0xd4, 0xf0, 0xaf, 0x14,
	0x93, 0x49, 0x44, 0x89, 0xb8, 0x2e, 0x0b, 0x4a, 0x4d, 0x3f, 0xce, 0x33, 0xe9, 0x60, 0x21, 0x72,
	0xb5, 0x4b, 0x12, 0xba, 0xe0, 0x30, 0x4a, 0xfd, 0x71, 0xe4, 0x13, 0x34, 0xc6, 0xfe, 0x30, 0x22,
	0x21, 0xfa, 0x8d, 0x19, 0x15, 0x37, 0x64, 0x41, 0xd9, 0xd1, 0xe5, 0x3c, 0x93, 0x1a, 0x73, 0xbf,
	0x5d, 0xd9, 0x57, 0x98, 0x51, 0xae, 0x15, 0x5c, 0x75, 0xe1, 0x25, 0x38, 0xae, 0x0e, 0x82, 0xe8,
	0xe8, 0x4e, 0xd7, 0x89, 0xb8, 0x53, 0x7e, 0x9a, 0x66, 0x9e, 0x49, 0xaf, 0x2a, 0xc4, 0x19, 0x71,
	0x95, 0x13, 0xae, 0xf1, 0xe1, 0x43, 0x3e, 0x3c, 0x03, 0x35, 0xe6, 0xdf, 0xa0, 0x88, 0x24, 0xd3,
	0x54, 0xdc, 0x2c, 0x4f, 0x79, 0x94, 0x67, 0x12, 0x64, 0xfe, 0x8d, 0x5d, 0x68, 0x5c, 0x83, 0x9d,
	0x5b, 0x0d, 0xce, 0xc0, 0x01, 0x9f, 0x0f, 0x9a, 0xd0, 0x29, 0x0b, 0xb0, 0xb8, 0x25, 0x0b, 0xca,
	0xde, 0xa9, 0xa2, 0x2e, 0x82, 0x55, 0xb9, 0x50, 0x55, 0x63, 0x19, 0x51, 0xaf, 0xe4, 0x75, 0x29,
	0xcf, 0xa4, 0x97, 0xc1, 0x7d, 0x99, 0x9b, 0xb8, 0xbf, 0x62, 0xc2, 0x9f, 0x40, 0x4a, 0x18, 0x1e,
	0x61, 0xc6, 0xf0, 0x10, 0x0d, 0x69, 0x8c, 0x27, 0x69, 0x14, 0xa0, 0xc0, 0x67, 0x2c, 0xc2, 0xac,
	0xba, 0x2d, 0xdb, 0xe5, 0x29, 0xde, 0xe6, 0x99, 0xf4, 0x66, 0x81, 0x9a, 0x73, 0xd2, 0xa8, 0xc0,
	0x7b, 0xd7, 0xa7, 0xf1, 0x18, 0xd7, 0xfc, 0x2b, 0x80, 0xfd, 0x95, 0x97, 0x87, 0xaf, 0x81, 0x64,
	0x38, 0x5e, 0xa7, 0xef, 0x5e, 0x22, 0xc3, 0x31, 0x2d, 0xd4, 0x73, 0x3c, 0xd7, 0xb0, 0x90, 0xd7,
	0xe9, 0x75, 0x2d, 0xc3, 0x6e, 0xd9, 0x96, 0x59, 0xff, 0x0f, 0x9e, 0x02, 0xf5, 0x21, 0xa8, 0xe5,
	0x3a, 0x17, 0xa8, 0xe3, 0x5d, 0xe8, 0x96, 0x8b, 0xbe, 0xda, 0xfd, 0x2f, 0xa8, 0xdb, 0xf6, 0x7a,
	0xa8, 0x67, 0x7f, 0xee, 0xd4, 0x05, 0x78, 0x02, 0x94, 0x27, 0xd5, 0xd8, 0xa6, 0x59, 0x5f, 0x83,
	0xe7, 0xe0, 0xfd, 0x53, 0x68, 0xc7, 0xeb, 0x73, 0x43, 0xd6, 0x1f, 0x1d, 0x62, 0x5a, 0xad, 0x4f,
	0x5e, 0xbb, 0x8f, 0xe6, 0x40, 0x7d, 0x43, 0xff, 0x06, 0x8e, 0x28, 0x0b, 0xcb, 0x5c, 0xc7, 0x3e,
	0x09, 0x97, 0x01, 0xeb, 0x75, 0x2e, 0xe1, 0x6e, 0xf1, 0x5b, 0x77, 0x85, 0x2b, 0x2d, 0x8c, 0xd2,
	0xeb, 0xe9, 0x40, 0x0d, 0x68, 0xac, 0x15, 0xe4, 0xbb, 0xa2, 0xa6, 0x5a, 0x03, 0x21, 0xd5, 0x92,
	0x1f, 0xa1, 0xb6, 0xd8, 0x0b, 0x1f, 0x8a, 0xc7, 0x60, 0xab, 0x5c, 0x08, 0x67, 0xff, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xff, 0x6d, 0x60, 0x37, 0x30, 0x04, 0x00, 0x00,
}
