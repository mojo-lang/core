// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mojo/core/regex.proto

package core

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Regex struct {
	Expression           string   `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Regex) Reset()         { *m = Regex{} }
func (m *Regex) String() string { return proto.CompactTextString(m) }
func (*Regex) ProtoMessage()    {}
func (*Regex) Descriptor() ([]byte, []int) {
	return fileDescriptor_3390a9b8944f095e, []int{0}
}
func (m *Regex) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Regex.Unmarshal(m, b)
}
func (m *Regex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Regex.Marshal(b, m, deterministic)
}
func (m *Regex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Regex.Merge(m, src)
}
func (m *Regex) XXX_Size() int {
	return xxx_messageInfo_Regex.Size(m)
}
func (m *Regex) XXX_DiscardUnknown() {
	xxx_messageInfo_Regex.DiscardUnknown(m)
}

var xxx_messageInfo_Regex proto.InternalMessageInfo

func (m *Regex) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

func init() {
	proto.RegisterType((*Regex)(nil), "mojo.core.Regex")
}

func init() { proto.RegisterFile("mojo/core/regex.proto", fileDescriptor_3390a9b8944f095e) }

var fileDescriptor_3390a9b8944f095e = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcd, 0xcd, 0xcf, 0xca,
	0xd7, 0x4f, 0xce, 0x2f, 0x4a, 0xd5, 0x2f, 0x4a, 0x4d, 0x4f, 0xad, 0xd0, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x04, 0x09, 0xeb, 0x81, 0x84, 0x95, 0x1c, 0xb9, 0x58, 0x83, 0x40, 0x32, 0x42,
	0x16, 0x5c, 0x5c, 0xa9, 0x15, 0x05, 0x45, 0xa9, 0xc5, 0xc5, 0x99, 0xf9, 0x79, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0x9c, 0x4e, 0x12, 0xaf, 0xee, 0xc9, 0x8b, 0x20, 0x44, 0x75, 0xf2, 0x73, 0x33, 0x4b,
	0x52, 0x73, 0x0b, 0x4a, 0x2a, 0x83, 0x90, 0xd4, 0x3a, 0x85, 0x73, 0x89, 0xe5, 0x17, 0xa5, 0xeb,
	0x81, 0xcc, 0xcc, 0x49, 0xcc, 0x83, 0x30, 0xc0, 0x86, 0x3b, 0x71, 0x81, 0x8d, 0x0e, 0x00, 0xd9,
	0x19, 0xc0, 0x18, 0xa5, 0x9f, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x0f,
	0x52, 0xa3, 0x0b, 0x52, 0x0d, 0x71, 0x5c, 0x7a, 0xbe, 0x7e, 0x41, 0x76, 0xba, 0x3e, 0xdc, 0xb5,
	0xd6, 0x20, 0x22, 0x89, 0x0d, 0xec, 0x5a, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x7b,
	0xd1, 0x0a, 0xc6, 0x00, 0x00, 0x00,
}
